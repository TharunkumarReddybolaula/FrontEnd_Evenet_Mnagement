{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ModifyLocationComponent = class ModifyLocationComponent {\n  constructor(locationService, activatedRoute, router) {\n    this.locationService = locationService;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.location = {\n      city: '',\n      state: '',\n      description: ''\n    };\n    this.locationId = null;\n  }\n  ngOnInit() {\n    // Fetch the location ID from the route if you are modifying an existing location\n    this.locationId = +this.activatedRoute.snapshot.paramMap.get('id');\n    if (this.locationId) {\n      this.loadLocation(this.locationId);\n    }\n  }\n  loadLocation(id) {\n    this.locationService.getLocationById(id).subscribe({\n      next: data => {\n        this.location = data;\n      },\n      error: () => {\n        alert('Error loading location details.');\n      }\n    });\n  }\n  updateLocation() {\n    if (this.locationId) {\n      // Pass the location object and the locationId as arguments\n      this.locationService.updateLocation(this.location, this.locationId).subscribe({\n        next: () => {\n          alert('Location updated successfully!');\n          this.router.navigate(['/view-location']); // Navigate to view-location page\n        },\n\n        error: err => {\n          console.error('Error updating location:', err);\n          alert('Failed to update location.');\n        }\n      });\n    }\n  }\n};\nModifyLocationComponent = __decorate([Component({\n  selector: 'app-modify-location',\n  templateUrl: './modify-location.component.html',\n  styleUrls: ['./modify-location.component.css']\n})], ModifyLocationComponent);","map":{"version":3,"names":["Component","ModifyLocationComponent","constructor","locationService","activatedRoute","router","location","city","state","description","locationId","ngOnInit","snapshot","paramMap","get","loadLocation","id","getLocationById","subscribe","next","data","error","alert","updateLocation","navigate","err","console","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\services copy\\location.service.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Location, LocationService } from '../services copy/location.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-modify-location',\r\n  templateUrl: './modify-location.component.html',\r\n  styleUrls: ['./modify-location.component.css']\r\n})\r\nexport class ModifyLocationComponent implements OnInit {\r\n  location: Location = {\r\n    city: '',\r\n    state: '',\r\n    description: ''\r\n  };\r\n\r\n  locationId: number | null = null;\r\n\r\n  constructor(\r\n    private locationService: LocationService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Fetch the location ID from the route if you are modifying an existing location\r\n    this.locationId = +this.activatedRoute.snapshot.paramMap.get('id')!;\r\n    \r\n    if (this.locationId) {\r\n      this.loadLocation(this.locationId);\r\n    }\r\n  }\r\n\r\n  loadLocation(id: number) {\r\n    this.locationService.getLocationById(id).subscribe({\r\n      next: (data) => {\r\n        this.location = data;\r\n      },\r\n      error: () => {\r\n        alert('Error loading location details.');\r\n      }\r\n    });\r\n  }\r\n\r\n  updateLocation() {\r\n    if (this.locationId) {\r\n      // Pass the location object and the locationId as arguments\r\n      this.locationService.updateLocation(this.location, this.locationId).subscribe({\r\n        next: () => {\r\n          alert('Location updated successfully!');\r\n          this.router.navigate(['/view-location']);  // Navigate to view-location page\r\n        },\r\n        error: (err) => {\r\n          console.error('Error updating location:', err);\r\n          alert('Failed to update location.');\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAS1C,WAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EASlCC,YACUC,eAAgC,EAChCC,cAA8B,EAC9BC,MAAc;IAFd,KAAAF,eAAe,GAAfA,eAAe;IACf,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,MAAM,GAANA,MAAM;IAXhB,KAAAC,QAAQ,GAAa;MACnBC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE;KACd;IAED,KAAAC,UAAU,GAAkB,IAAI;EAM7B;EAEHC,QAAQA,CAAA;IACN;IACA,IAAI,CAACD,UAAU,GAAG,CAAC,IAAI,CAACN,cAAc,CAACQ,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAE;IAEnE,IAAI,IAAI,CAACJ,UAAU,EAAE;MACnB,IAAI,CAACK,YAAY,CAAC,IAAI,CAACL,UAAU,CAAC;;EAEtC;EAEAK,YAAYA,CAACC,EAAU;IACrB,IAAI,CAACb,eAAe,CAACc,eAAe,CAACD,EAAE,CAAC,CAACE,SAAS,CAAC;MACjDC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACd,QAAQ,GAAGc,IAAI;MACtB,CAAC;MACDC,KAAK,EAAEA,CAAA,KAAK;QACVC,KAAK,CAAC,iCAAiC,CAAC;MAC1C;KACD,CAAC;EACJ;EAEAC,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACb,UAAU,EAAE;MACnB;MACA,IAAI,CAACP,eAAe,CAACoB,cAAc,CAAC,IAAI,CAACjB,QAAQ,EAAE,IAAI,CAACI,UAAU,CAAC,CAACQ,SAAS,CAAC;QAC5EC,IAAI,EAAEA,CAAA,KAAK;UACTG,KAAK,CAAC,gCAAgC,CAAC;UACvC,IAAI,CAACjB,MAAM,CAACmB,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAE;QAC7C,CAAC;;QACDH,KAAK,EAAGI,GAAG,IAAI;UACbC,OAAO,CAACL,KAAK,CAAC,0BAA0B,EAAEI,GAAG,CAAC;UAC9CH,KAAK,CAAC,4BAA4B,CAAC;QACrC;OACD,CAAC;;EAEN;CACD;AAlDYrB,uBAAuB,GAAA0B,UAAA,EALnC3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,C,EACW7B,uBAAuB,CAkDnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}