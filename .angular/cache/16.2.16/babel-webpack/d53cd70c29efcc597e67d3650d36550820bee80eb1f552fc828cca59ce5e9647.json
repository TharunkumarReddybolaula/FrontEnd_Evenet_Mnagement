{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SpeakerService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5070/api/Admin'; // Base URL for the API\n  }\n  /**\n   * Add a new speaker with linked User credentials\n   * @param speaker - Speaker details\n   * @param username - Username for login\n   * @param password - Password for login\n   */\n  addSpeaker(speaker, username, password) {\n    return this.http.post(`${this.apiUrl}/Add?username=${username}&password=${password}`, speaker);\n  }\n  /** Fetch all speakers */\n  getSpeakers() {\n    return this.http.get(`${this.apiUrl}/Speakers`); // Ensure this matches your backend API endpoint\n  }\n\n  static {\n    this.ɵfac = function SpeakerService_Factory(t) {\n      return new (t || SpeakerService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SpeakerService,\n      factory: SpeakerService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["SpeakerService","constructor","http","apiUrl","addSpeaker","speaker","username","password","post","getSpeakers","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\services copy\\speaker.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface Speaker {\r\n  speakerId?: number;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  address: string;\r\n  keySkills?: string;\r\n  userId?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SpeakerService {\r\n  private apiUrl = 'http://localhost:5070/api/Admin';  // Base URL for the API\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Add a new speaker with linked User credentials\r\n   * @param speaker - Speaker details\r\n   * @param username - Username for login\r\n   * @param password - Password for login\r\n   */\r\n  addSpeaker(speaker: Speaker, username: string, password: string): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/Add?username=${username}&password=${password}`, speaker);\r\n  }\r\n\r\n  /** Fetch all speakers */\r\n  getSpeakers(): Observable<Speaker[]> {\r\n    return this.http.get<Speaker[]>(`${this.apiUrl}/Speakers`);  // Ensure this matches your backend API endpoint\r\n  }\r\n}\r\n"],"mappings":";;AAiBA,OAAM,MAAOA,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,iCAAiC,CAAC,CAAE;EAEd;EAEvC;;;;;;EAMAC,UAAUA,CAACC,OAAgB,EAAEC,QAAgB,EAAEC,QAAgB;IAC7D,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,iBAAiBG,QAAQ,aAAaC,QAAQ,EAAE,EAAEF,OAAO,CAAC;EAChG;EAEA;EACAI,WAAWA,CAAA;IACT,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAY,GAAG,IAAI,CAACP,MAAM,WAAW,CAAC,CAAC,CAAE;EAC/D;;;;uBAlBWH,cAAc,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAdd,cAAc;MAAAe,OAAA,EAAdf,cAAc,CAAAgB,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}