{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:5070/api/Admin'; // Base URL for the Admin API\n  }\n  // Add an administrator with username and password as query parameters\n  addAdmin(admin, username, password) {\n    const params = new HttpParams().set('username', username).set('password', password);\n    return this.http.post(`${this.baseUrl}/Administrators/Add`, admin, {\n      params\n    }).pipe(catchError(this.handleError)); // Error handling\n  }\n  // Get all administrators\n  getAllAdmins() {\n    return this.http.get(`${this.baseUrl}/Administrators`) // Correct endpoint\n    .pipe(catchError(this.handleError)); // Error handling\n  }\n\n  handleError(error) {\n    console.error('Error occurred:', error);\n    throw error; // Rethrow the error\n  }\n\n  static {\n    this.ɵfac = function AdminService_Factory(t) {\n      return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminService,\n      factory: AdminService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","catchError","AdminService","constructor","http","baseUrl","addAdmin","admin","username","password","params","set","post","pipe","handleError","getAllAdmins","get","error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\services copy\\admin.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nexport interface Administrator {\r\n  adminId?: number;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  userId?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n  private baseUrl = 'http://localhost:5070/api/Admin';  // Base URL for the Admin API\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Add an administrator with username and password as query parameters\r\n  addAdmin(admin: Administrator, username: string, password: string): Observable<any> {\r\n    const params = new HttpParams()\r\n      .set('username', username)\r\n      .set('password', password);\r\n\r\n    return this.http.post<any>(`${this.baseUrl}/Administrators/Add`, admin, { params })\r\n      .pipe(catchError(this.handleError)); // Error handling\r\n  }\r\n\r\n  // Get all administrators\r\n  getAllAdmins(): Observable<Administrator[]> {\r\n    return this.http.get<Administrator[]>(`${this.baseUrl}/Administrators`) // Correct endpoint\r\n      .pipe(catchError(this.handleError)); // Error handling\r\n  }\r\n\r\n  private handleError(error: any): Observable<never> {\r\n    console.error('Error occurred:', error);\r\n    throw error; // Rethrow the error\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;AAG7D,SAASC,UAAU,QAAQ,gBAAgB;;;AAa3C,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,iCAAiC,CAAC,CAAE;EAEd;EAExC;EACAC,QAAQA,CAACC,KAAoB,EAAEC,QAAgB,EAAEC,QAAgB;IAC/D,MAAMC,MAAM,GAAG,IAAIV,UAAU,EAAE,CAC5BW,GAAG,CAAC,UAAU,EAAEH,QAAQ,CAAC,CACzBG,GAAG,CAAC,UAAU,EAAEF,QAAQ,CAAC;IAE5B,OAAO,IAAI,CAACL,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACP,OAAO,qBAAqB,EAAEE,KAAK,EAAE;MAAEG;IAAM,CAAE,CAAC,CAChFG,IAAI,CAACZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAAC,CAAC,CAAC;EACzC;EAEA;EACAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAkB,GAAG,IAAI,CAACX,OAAO,iBAAiB,CAAC,CAAC;IAAA,CACrEQ,IAAI,CAACZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAAC,CAAC,CAAC;EACzC;;EAEQA,WAAWA,CAACG,KAAU;IAC5BC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,MAAMA,KAAK,CAAC,CAAC;EACf;;;;uBAxBWf,YAAY,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZpB,YAAY;MAAAqB,OAAA,EAAZrB,YAAY,CAAAsB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}