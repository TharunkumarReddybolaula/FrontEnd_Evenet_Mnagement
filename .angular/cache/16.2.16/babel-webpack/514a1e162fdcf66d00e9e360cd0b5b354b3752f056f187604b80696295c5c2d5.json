{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ViewEventComponent = class ViewEventComponent {\n  constructor(eventService) {\n    this.eventService = eventService;\n    this.events = []; // Store events\n    this.loading = true; // Loading indicator\n    this.errorMessage = ''; // Error message to display\n  }\n\n  ngOnInit() {\n    this.loadEvents();\n  }\n  // Method to load events\n  loadEvents() {\n    this.eventService.getEvents().subscribe({\n      next: data => {\n        this.events = data; // Store event data\n        this.loading = false; // Hide loading indicator\n      },\n\n      error: err => {\n        this.errorMessage = 'Failed to load events: ' + err.message; // Set error message\n        this.loading = false; // Hide loading indicator\n        console.error('Error fetching events:', err); // Log error to console\n      }\n    });\n  }\n};\n\nViewEventComponent = __decorate([Component({\n  selector: 'app-view-event',\n  templateUrl: './view-event.component.html',\n  styleUrls: ['./view-event.component.css']\n})], ViewEventComponent);","map":{"version":3,"names":["Component","ViewEventComponent","constructor","eventService","events","loading","errorMessage","ngOnInit","loadEvents","getEvents","subscribe","next","data","error","err","message","console","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\view-event\\view-event.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { EventService, Event } from '../services/event.service';\r\n\r\n@Component({\r\n  selector: 'app-view-event',\r\n  templateUrl: './view-event.component.html',\r\n  styleUrls: ['./view-event.component.css']\r\n})\r\nexport class ViewEventComponent implements OnInit {\r\n  events: Event[] = [];  // Store events\r\n  loading: boolean = true; // Loading indicator\r\n  errorMessage: string = '';  // Error message to display\r\n\r\n  constructor(private eventService: EventService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadEvents();\r\n  }\r\n\r\n  // Method to load events\r\n  loadEvents() {\r\n    this.eventService.getEvents().subscribe({\r\n      next: (data) => {\r\n        this.events = data;  // Store event data\r\n        this.loading = false; // Hide loading indicator\r\n      },\r\n      error: (err) => {\r\n        this.errorMessage = 'Failed to load events: ' + err.message; // Set error message\r\n        this.loading = false; // Hide loading indicator\r\n        console.error('Error fetching events:', err); // Log error to console\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAK7BC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IAJhC,KAAAC,MAAM,GAAY,EAAE,CAAC,CAAE;IACvB,KAAAC,OAAO,GAAY,IAAI,CAAC,CAAC;IACzB,KAAAC,YAAY,GAAW,EAAE,CAAC,CAAE;EAEqB;;EAEjDC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,EAAE;EACnB;EAEA;EACAA,UAAUA,CAAA;IACR,IAAI,CAACL,YAAY,CAACM,SAAS,EAAE,CAACC,SAAS,CAAC;MACtCC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACR,MAAM,GAAGQ,IAAI,CAAC,CAAE;QACrB,IAAI,CAACP,OAAO,GAAG,KAAK,CAAC,CAAC;MACxB,CAAC;;MACDQ,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACR,YAAY,GAAG,yBAAyB,GAAGQ,GAAG,CAACC,OAAO,CAAC,CAAC;QAC7D,IAAI,CAACV,OAAO,GAAG,KAAK,CAAC,CAAC;QACtBW,OAAO,CAACH,KAAK,CAAC,wBAAwB,EAAEC,GAAG,CAAC,CAAC,CAAC;MAChD;KACD,CAAC;EACJ;CACD;;AAzBYb,kBAAkB,GAAAgB,UAAA,EAL9BjB,SAAS,CAAC;EACTkB,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,C,EACWnB,kBAAkB,CAyB9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}