{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ParticipantRegisterComponent = class ParticipantRegisterComponent {\n  constructor(participantsService) {\n    this.participantsService = participantsService;\n    this.participant = {\n      name: '',\n      email: '',\n      phone: '',\n      user: {\n        username: '',\n        password: ''\n      }\n    };\n    this.loading = false;\n    this.successMessage = '';\n    this.errorMessage = '';\n  }\n  onSubmit(form) {\n    this.successMessage = '';\n    this.errorMessage = '';\n    if (form.invalid) {\n      this.errorMessage = 'Please fix validation errors before submitting.';\n      return;\n    }\n    this.loading = true;\n    this.participantsService.register(this.participant).subscribe({\n      next: res => {\n        this.successMessage = res?.message || 'Participant registered successfully';\n        this.loading = false;\n        form.resetForm();\n        // re-initialize to avoid undefined nested object\n        this.participant = {\n          name: '',\n          email: '',\n          phone: '',\n          user: {\n            username: '',\n            password: ''\n          }\n        };\n      },\n      error: err => {\n        console.error('Registration error:', err);\n        // err.error can be string or object depending on API\n        if (err?.error) {\n          if (typeof err.error === 'string') this.errorMessage = err.error;else if (err.error.message) this.errorMessage = err.error.message;else this.errorMessage = JSON.stringify(err.error);\n        } else {\n          this.errorMessage = `Server responded with status ${err.status}`;\n        }\n        this.loading = false;\n      }\n    });\n  }\n};\nParticipantRegisterComponent = __decorate([Component({\n  selector: 'app-participant-register',\n  templateUrl: './participant-register.component.html',\n  styleUrls: ['./participant-register.component.css']\n})], ParticipantRegisterComponent);","map":{"version":3,"names":["Component","ParticipantRegisterComponent","constructor","participantsService","participant","name","email","phone","user","username","password","loading","successMessage","errorMessage","onSubmit","form","invalid","register","subscribe","next","res","message","resetForm","error","err","console","JSON","stringify","status","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\participant-register\\participant-register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ParticipantsService, Participant } from '../services/participants.service';\n\n@Component({\n  selector: 'app-participant-register',\n  templateUrl: './participant-register.component.html',\n  styleUrls: ['./participant-register.component.css']\n})\nexport class ParticipantRegisterComponent {\n  participant: Participant = {\n    name: '',\n    email: '',\n    phone: '',\n    user: {\n      username: '',\n      password: ''\n    }\n  };\n\n  loading = false;\n  successMessage = '';\n  errorMessage = '';\n\n  constructor(private participantsService: ParticipantsService) {}\n\n  onSubmit(form: NgForm) {\n    this.successMessage = '';\n    this.errorMessage = '';\n\n    if (form.invalid) {\n      this.errorMessage = 'Please fix validation errors before submitting.';\n      return;\n    }\n\n    this.loading = true;\n\n    this.participantsService.register(this.participant).subscribe({\n      next: (res) => {\n        this.successMessage = res?.message || 'Participant registered successfully';\n        this.loading = false;\n        form.resetForm();\n        // re-initialize to avoid undefined nested object\n        this.participant = { name: '', email: '', phone: '', user: { username: '', password: '' } };\n      },\n      error: (err) => {\n        console.error('Registration error:', err);\n        // err.error can be string or object depending on API\n        if (err?.error) {\n          if (typeof err.error === 'string') this.errorMessage = err.error;\n          else if (err.error.message) this.errorMessage = err.error.message;\n          else this.errorMessage = JSON.stringify(err.error);\n        } else {\n          this.errorMessage = `Server responded with status ${err.status}`;\n        }\n        this.loading = false;\n      }\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,WAAMC,4BAA4B,GAAlC,MAAMA,4BAA4B;EAevCC,YAAoBC,mBAAwC;IAAxC,KAAAA,mBAAmB,GAAnBA,mBAAmB;IAdvC,KAAAC,WAAW,GAAgB;MACzBC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE;QACJC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE;;KAEb;IAED,KAAAC,OAAO,GAAG,KAAK;IACf,KAAAC,cAAc,GAAG,EAAE;IACnB,KAAAC,YAAY,GAAG,EAAE;EAE8C;EAE/DC,QAAQA,CAACC,IAAY;IACnB,IAAI,CAACH,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,YAAY,GAAG,EAAE;IAEtB,IAAIE,IAAI,CAACC,OAAO,EAAE;MAChB,IAAI,CAACH,YAAY,GAAG,iDAAiD;MACrE;;IAGF,IAAI,CAACF,OAAO,GAAG,IAAI;IAEnB,IAAI,CAACR,mBAAmB,CAACc,QAAQ,CAAC,IAAI,CAACb,WAAW,CAAC,CAACc,SAAS,CAAC;MAC5DC,IAAI,EAAGC,GAAG,IAAI;QACZ,IAAI,CAACR,cAAc,GAAGQ,GAAG,EAAEC,OAAO,IAAI,qCAAqC;QAC3E,IAAI,CAACV,OAAO,GAAG,KAAK;QACpBI,IAAI,CAACO,SAAS,EAAE;QAChB;QACA,IAAI,CAAClB,WAAW,GAAG;UAAEC,IAAI,EAAE,EAAE;UAAEC,KAAK,EAAE,EAAE;UAAEC,KAAK,EAAE,EAAE;UAAEC,IAAI,EAAE;YAAEC,QAAQ,EAAE,EAAE;YAAEC,QAAQ,EAAE;UAAE;QAAE,CAAE;MAC7F,CAAC;MACDa,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEC,GAAG,CAAC;QACzC;QACA,IAAIA,GAAG,EAAED,KAAK,EAAE;UACd,IAAI,OAAOC,GAAG,CAACD,KAAK,KAAK,QAAQ,EAAE,IAAI,CAACV,YAAY,GAAGW,GAAG,CAACD,KAAK,CAAC,KAC5D,IAAIC,GAAG,CAACD,KAAK,CAACF,OAAO,EAAE,IAAI,CAACR,YAAY,GAAGW,GAAG,CAACD,KAAK,CAACF,OAAO,CAAC,KAC7D,IAAI,CAACR,YAAY,GAAGa,IAAI,CAACC,SAAS,CAACH,GAAG,CAACD,KAAK,CAAC;SACnD,MAAM;UACL,IAAI,CAACV,YAAY,GAAG,gCAAgCW,GAAG,CAACI,MAAM,EAAE;;QAElE,IAAI,CAACjB,OAAO,GAAG,KAAK;MACtB;KACD,CAAC;EACJ;CACD;AAlDYV,4BAA4B,GAAA4B,UAAA,EALxC7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,0BAA0B;EACpCC,WAAW,EAAE,uCAAuC;EACpDC,SAAS,EAAE,CAAC,sCAAsC;CACnD,CAAC,C,EACW/B,4BAA4B,CAkDxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}