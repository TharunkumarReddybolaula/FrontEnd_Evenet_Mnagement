{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n// import { SpeakerService } from '../services copy/speaker.service';\nimport { forkJoin } from 'rxjs';\nexport let AdminDashboardComponent = class AdminDashboardComponent {\n  constructor(adminService, eventService, topicService, locationService, speakerService) {\n    this.adminService = adminService;\n    this.eventService = eventService;\n    this.topicService = topicService;\n    this.locationService = locationService;\n    this.speakerService = speakerService;\n    this.counts = {\n      admins: 0,\n      events: 0,\n      topics: 0,\n      locations: 0,\n      speakers: 0\n    };\n  }\n  ngOnInit() {\n    this.loadCounts();\n  }\n  loadCounts() {\n    // Using forkJoin to load all counts in parallel and update the counts object\n    forkJoin({\n      admins: this.adminService.getAllAdmins(),\n      events: this.eventService.getEvents(),\n      topics: this.topicService.getAllTopics(),\n      locations: this.locationService.getLocations(),\n      speakers: this.speakerService.getSpeakers()\n    }).subscribe(response => {\n      this.counts.admins = response.admins.length;\n      this.counts.events = response.events.length;\n      this.counts.topics = response.topics.length;\n      this.counts.locations = response.locations.length;\n      this.counts.speakers = response.speakers.length;\n    });\n  }\n};\nAdminDashboardComponent = __decorate([Component({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.css']\n})], AdminDashboardComponent);","map":{"version":3,"names":["Component","forkJoin","AdminDashboardComponent","constructor","adminService","eventService","topicService","locationService","speakerService","counts","admins","events","topics","locations","speakers","ngOnInit","loadCounts","getAllAdmins","getEvents","getAllTopics","getLocations","getSpeakers","subscribe","response","length","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\admin-dashboard\\admin-dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AdminService } from '../services copy/admin.service';\r\nimport { EventService } from '../services copy/event.service';\r\nimport { TopicServiceService } from '../services copy/topic-service.service';\r\nimport { LocationService } from '../services copy/location.service';\r\n// import { SpeakerService } from '../services copy/speaker.service';\r\nimport { forkJoin } from 'rxjs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AdminService } from '../services copy/admin.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-admin-dashboard',\r\n  templateUrl: './admin-dashboard.component.html',\r\n  styleUrls: ['./admin-dashboard.component.css']\r\n})\r\nexport class AdminDashboardComponent implements OnInit {\r\n  counts = {\r\n    admins: 0,\r\n    events: 0,\r\n    topics: 0,\r\n    locations: 0,\r\n    speakers: 0\r\n  };\r\n\r\n  constructor(\r\n    private adminService: AdminService,\r\n    private eventService: EventService,\r\n    private topicService: TopicServiceService,\r\n    private locationService: LocationService,\r\n    private speakerService: SpeakerService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadCounts();\r\n  }\r\n\r\n  loadCounts() {\r\n    // Using forkJoin to load all counts in parallel and update the counts object\r\n    forkJoin({\r\n      admins: this.adminService.getAllAdmins(),\r\n      events: this.eventService.getEvents(),\r\n      topics: this.topicService.getAllTopics(),\r\n      locations: this.locationService.getLocations(),\r\n      speakers: this.speakerService.getSpeakers()\r\n    }).subscribe(response => {\r\n      this.counts.admins = response.admins.length;\r\n      this.counts.events = response.events.length;\r\n      this.counts.topics = response.topics.length;\r\n      this.counts.locations = response.locations.length;\r\n      this.counts.speakers = response.speakers.length;\r\n    });\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAKjD;AACA,SAASC,QAAQ,QAAQ,MAAM;AAUxB,WAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EASlCC,YACUC,YAA0B,EAC1BC,YAA0B,EAC1BC,YAAiC,EACjCC,eAAgC,EAChCC,cAA8B;IAJ9B,KAAAJ,YAAY,GAAZA,YAAY;IACZ,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,eAAe,GAAfA,eAAe;IACf,KAAAC,cAAc,GAAdA,cAAc;IAbxB,KAAAC,MAAM,GAAG;MACPC,MAAM,EAAE,CAAC;MACTC,MAAM,EAAE,CAAC;MACTC,MAAM,EAAE,CAAC;MACTC,SAAS,EAAE,CAAC;MACZC,QAAQ,EAAE;KACX;EAQG;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,EAAE;EACnB;EAEAA,UAAUA,CAAA;IACR;IACAf,QAAQ,CAAC;MACPS,MAAM,EAAE,IAAI,CAACN,YAAY,CAACa,YAAY,EAAE;MACxCN,MAAM,EAAE,IAAI,CAACN,YAAY,CAACa,SAAS,EAAE;MACrCN,MAAM,EAAE,IAAI,CAACN,YAAY,CAACa,YAAY,EAAE;MACxCN,SAAS,EAAE,IAAI,CAACN,eAAe,CAACa,YAAY,EAAE;MAC9CN,QAAQ,EAAE,IAAI,CAACN,cAAc,CAACa,WAAW;KAC1C,CAAC,CAACC,SAAS,CAACC,QAAQ,IAAG;MACtB,IAAI,CAACd,MAAM,CAACC,MAAM,GAAGa,QAAQ,CAACb,MAAM,CAACc,MAAM;MAC3C,IAAI,CAACf,MAAM,CAACE,MAAM,GAAGY,QAAQ,CAACZ,MAAM,CAACa,MAAM;MAC3C,IAAI,CAACf,MAAM,CAACG,MAAM,GAAGW,QAAQ,CAACX,MAAM,CAACY,MAAM;MAC3C,IAAI,CAACf,MAAM,CAACI,SAAS,GAAGU,QAAQ,CAACV,SAAS,CAACW,MAAM;MACjD,IAAI,CAACf,MAAM,CAACK,QAAQ,GAAGS,QAAQ,CAACT,QAAQ,CAACU,MAAM;IACjD,CAAC,CAAC;EACJ;CACD;AArCYtB,uBAAuB,GAAAuB,UAAA,EALnCzB,SAAS,CAAC;EACT0B,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,C,EACW1B,uBAAuB,CAqCnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}