{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ModifyEventComponent = class ModifyEventComponent {\n  constructor(eventService) {\n    this.eventService = eventService;\n    this.events = [];\n    this.loading = true;\n    this.errorMessage = '';\n    this.selectedEvent = null;\n  }\n  ngOnInit() {\n    // Load all events initially (optional)\n    this.loadEvents();\n  }\n  // Fetch the event by ID\n  onSelectEvent(eventId) {\n    this.eventService.getEventById(eventId).subscribe({\n      next: data => {\n        this.selectedEvent = data;\n        console.log('Event data fetched:', data);\n      },\n      error: err => {\n        this.errorMessage = 'Error fetching event details.';\n        console.error('Error fetching event:', err);\n      }\n    });\n  }\n  // Load all events (optional)\n  loadEvents() {\n    this.eventService.getEvents().subscribe({\n      next: data => {\n        this.events = data;\n        this.loading = false;\n        console.log('All events fetched:', data);\n      },\n      error: err => {\n        this.errorMessage = 'Error fetching events.';\n        console.error('Error fetching events:', err);\n        this.loading = false;\n      }\n    });\n  }\n  // Modify the selected event\n  modifyEvent() {\n    if (this.selectedEvent) {\n      this.eventService.updateEvent(this.selectedEvent.eventId, this.selectedEvent).subscribe({\n        next: data => {\n          console.log('Event updated successfully:', data);\n        },\n        error: err => {\n          this.errorMessage = 'Error updating event.';\n          console.error('Error updating event:', err);\n        }\n      });\n    }\n  }\n};\nModifyEventComponent = __decorate([Component({\n  selector: 'app-modify-event',\n  templateUrl: './modify-event.component.html',\n  styleUrls: ['./modify-event.component.css']\n})], ModifyEventComponent);","map":{"version":3,"names":["Component","ModifyEventComponent","constructor","eventService","events","loading","errorMessage","selectedEvent","ngOnInit","loadEvents","onSelectEvent","eventId","getEventById","subscribe","next","data","console","log","error","err","getEvents","modifyEvent","updateEvent","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\modify-event\\modify-event.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { EventService, Event } from '../services/event.service';  // Import your service and model\r\n\r\n@Component({\r\n  selector: 'app-modify-event',\r\n  templateUrl: './modify-event.component.html',\r\n  styleUrls: ['./modify-event.component.css']\r\n})\r\nexport class ModifyEventComponent implements OnInit {\r\n  events: Event[] = [];\r\n  loading = true;\r\n  errorMessage = '';\r\n  selectedEvent: Event | null = null;\r\n\r\n  constructor(private eventService: EventService) {}\r\n\r\n  ngOnInit(): void {\r\n    // Load all events initially (optional)\r\n    this.loadEvents();\r\n  }\r\n\r\n  // Fetch the event by ID\r\n  onSelectEvent(eventId: number): void {\r\n    this.eventService.getEventById(eventId).subscribe({\r\n      next: (data) => {\r\n        this.selectedEvent = data;\r\n        console.log('Event data fetched:', data);\r\n      },\r\n      error: (err) => {\r\n        this.errorMessage = 'Error fetching event details.';\r\n        console.error('Error fetching event:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Load all events (optional)\r\n  loadEvents(): void {\r\n    this.eventService.getEvents().subscribe({\r\n      next: (data) => {\r\n        this.events = data;\r\n        this.loading = false;\r\n        console.log('All events fetched:', data);\r\n      },\r\n      error: (err) => {\r\n        this.errorMessage = 'Error fetching events.';\r\n        console.error('Error fetching events:', err);\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Modify the selected event\r\n  modifyEvent(): void {\r\n    if (this.selectedEvent) {\r\n      this.eventService.updateEvent(this.selectedEvent.eventId!, this.selectedEvent).subscribe({\r\n        next: (data) => {\r\n          console.log('Event updated successfully:', data);\r\n        },\r\n        error: (err) => {\r\n          this.errorMessage = 'Error updating event.';\r\n          console.error('Error updating event:', err);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAM/BC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IALhC,KAAAC,MAAM,GAAY,EAAE;IACpB,KAAAC,OAAO,GAAG,IAAI;IACd,KAAAC,YAAY,GAAG,EAAE;IACjB,KAAAC,aAAa,GAAiB,IAAI;EAEe;EAEjDC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,UAAU,EAAE;EACnB;EAEA;EACAC,aAAaA,CAACC,OAAe;IAC3B,IAAI,CAACR,YAAY,CAACS,YAAY,CAACD,OAAO,CAAC,CAACE,SAAS,CAAC;MAChDC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACR,aAAa,GAAGQ,IAAI;QACzBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,IAAI,CAAC;MAC1C,CAAC;MACDG,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACb,YAAY,GAAG,+BAA+B;QACnDU,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEC,GAAG,CAAC;MAC7C;KACD,CAAC;EACJ;EAEA;EACAV,UAAUA,CAAA;IACR,IAAI,CAACN,YAAY,CAACiB,SAAS,EAAE,CAACP,SAAS,CAAC;MACtCC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACX,MAAM,GAAGW,IAAI;QAClB,IAAI,CAACV,OAAO,GAAG,KAAK;QACpBW,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,IAAI,CAAC;MAC1C,CAAC;MACDG,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACb,YAAY,GAAG,wBAAwB;QAC5CU,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEC,GAAG,CAAC;QAC5C,IAAI,CAACd,OAAO,GAAG,KAAK;MACtB;KACD,CAAC;EACJ;EAEA;EACAgB,WAAWA,CAAA;IACT,IAAI,IAAI,CAACd,aAAa,EAAE;MACtB,IAAI,CAACJ,YAAY,CAACmB,WAAW,CAAC,IAAI,CAACf,aAAa,CAACI,OAAQ,EAAE,IAAI,CAACJ,aAAa,CAAC,CAACM,SAAS,CAAC;QACvFC,IAAI,EAAGC,IAAI,IAAI;UACbC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,IAAI,CAAC;QAClD,CAAC;QACDG,KAAK,EAAGC,GAAG,IAAI;UACb,IAAI,CAACb,YAAY,GAAG,uBAAuB;UAC3CU,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEC,GAAG,CAAC;QAC7C;OACD,CAAC;;EAEN;CACD;AAzDYlB,oBAAoB,GAAAsB,UAAA,EALhCvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACWzB,oBAAoB,CAyDhC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}