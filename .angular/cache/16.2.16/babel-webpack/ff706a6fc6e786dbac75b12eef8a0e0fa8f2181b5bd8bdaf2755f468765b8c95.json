{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let EnrollEventComponent = class EnrollEventComponent {\n  constructor(speakerService) {\n    this.speakerService = speakerService;\n    this.events = [];\n    this.speakerId = 1; // should come from JWT or login\n    this.successMessage = '';\n    this.errorMessage = '';\n  }\n  ngOnInit() {\n    this.loadEvents();\n  }\n  loadEvents() {\n    this.speakerService.getEvents(this.speakerId).subscribe({\n      next: data => this.events = data,\n      error: () => this.errorMessage = '❌ Failed to fetch events'\n    });\n  }\n  enroll(eventId) {\n    this.successMessage = '';\n    this.errorMessage = '';\n    this.speakerService.enrollEvent(this.speakerId, eventId).subscribe({\n      next: () => this.successMessage = `✅ Enrolled in event ${eventId}`,\n      error: () => this.errorMessage = '❌ Enrollment failed'\n    });\n  }\n};\nEnrollEventComponent = __decorate([Component({\n  selector: 'app-enroll-event',\n  templateUrl: './enroll-event.component.html',\n  styleUrls: ['./enroll-event.component.css']\n})], EnrollEventComponent);","map":{"version":3,"names":["Component","EnrollEventComponent","constructor","speakerService","events","speakerId","successMessage","errorMessage","ngOnInit","loadEvents","getEvents","subscribe","next","data","error","enroll","eventId","enrollEvent","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\view-events\\view-events.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { SpeakerService, Eve } from '../speaker.service';\n\n@Component({\n  selector: 'app-enroll-event',\n  templateUrl: './enroll-event.component.html',\n  styleUrls: ['./enroll-event.component.css']\n})\nexport class EnrollEventComponent implements OnInit {\n  events: EventModel[] = [];\n  speakerId: number = 1; // should come from JWT or login\n  successMessage = '';\n  errorMessage = '';\n\n  constructor(private speakerService: SpeakerService) {}\n\n  ngOnInit() {\n    this.loadEvents();\n  }\n\n  loadEvents() {\n    this.speakerService.getEvents(this.speakerId).subscribe({\n      next: (data) => (this.events = data),\n      error: () => (this.errorMessage = '❌ Failed to fetch events')\n    });\n  }\n\n  enroll(eventId: number) {\n    this.successMessage = '';\n    this.errorMessage = '';\n\n    this.speakerService.enrollEvent(this.speakerId, eventId).subscribe({\n      next: () => (this.successMessage = `✅ Enrolled in event ${eventId}`),\n      error: () => (this.errorMessage = '❌ Enrollment failed')\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAM/BC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IALlC,KAAAC,MAAM,GAAiB,EAAE;IACzB,KAAAC,SAAS,GAAW,CAAC,CAAC,CAAC;IACvB,KAAAC,cAAc,GAAG,EAAE;IACnB,KAAAC,YAAY,GAAG,EAAE;EAEoC;EAErDC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,EAAE;EACnB;EAEAA,UAAUA,CAAA;IACR,IAAI,CAACN,cAAc,CAACO,SAAS,CAAC,IAAI,CAACL,SAAS,CAAC,CAACM,SAAS,CAAC;MACtDC,IAAI,EAAGC,IAAI,IAAM,IAAI,CAACT,MAAM,GAAGS,IAAK;MACpCC,KAAK,EAAEA,CAAA,KAAO,IAAI,CAACP,YAAY,GAAG;KACnC,CAAC;EACJ;EAEAQ,MAAMA,CAACC,OAAe;IACpB,IAAI,CAACV,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,YAAY,GAAG,EAAE;IAEtB,IAAI,CAACJ,cAAc,CAACc,WAAW,CAAC,IAAI,CAACZ,SAAS,EAAEW,OAAO,CAAC,CAACL,SAAS,CAAC;MACjEC,IAAI,EAAEA,CAAA,KAAO,IAAI,CAACN,cAAc,GAAG,uBAAuBU,OAAO,EAAG;MACpEF,KAAK,EAAEA,CAAA,KAAO,IAAI,CAACP,YAAY,GAAG;KACnC,CAAC;EACJ;CACD;AA5BYN,oBAAoB,GAAAiB,UAAA,EALhClB,SAAS,CAAC;EACTmB,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACWpB,oBAAoB,CA4BhC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}