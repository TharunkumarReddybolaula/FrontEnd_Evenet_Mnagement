{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5070/api/';\n    this.tokenKey = 'token';\n  }\n  signin(request) {\n    return this.http.post(`${this.apiUrl}/signin`, request);\n  }\n  saveToken(token) {\n    localStorage.setItem(this.tokenKey, token);\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n  }\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  /**\n   * Decodes JWT token and returns user object\n   * Assumes JWT has structure: { id, username, role, ... }\n   */\n  getCurrentUser() {\n    const token = this.getToken();\n    if (!token) return null;\n    try {\n      const payloadBase64 = token.split('.')[1];\n      const payloadJson = atob(payloadBase64);\n      const payload = JSON.parse(payloadJson);\n      return payload;\n    } catch (error) {\n      console.error('Failed to decode JWT:', error);\n      return null;\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthService","constructor","http","apiUrl","tokenKey","signin","request","post","saveToken","token","localStorage","setItem","getToken","getItem","logout","removeItem","isLoggedIn","getCurrentUser","payloadBase64","split","payloadJson","atob","payload","JSON","parse","error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface SignInRequest {\n  username: string;\n  password: string;\n  role: string;\n}\n\nexport interface SignInResponse {\n  message: string;\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:5070/api/';\n  private tokenKey = 'token';\n\n  constructor(private http: HttpClient) {}\n\n  signin(request: SignInRequest): Observable<SignInResponse> {\n    return this.http.post<SignInResponse>(`${this.apiUrl}/signin`, request);\n  }\n\n  saveToken(token: string): void {\n    localStorage.setItem(this.tokenKey, token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  logout(): void {\n    localStorage.removeItem(this.tokenKey);\n  }\n\n  isLoggedIn(): boolean {\n    return !!this.getToken();\n  }\n\n  /**\n   * Decodes JWT token and returns user object\n   * Assumes JWT has structure: { id, username, role, ... }\n   */\n  getCurrentUser(): any | null {\n    const token = this.getToken();\n    if (!token) return null;\n\n    try {\n      const payloadBase64 = token.split('.')[1];\n      const payloadJson = atob(payloadBase64);\n      const payload = JSON.parse(payloadJson);\n      return payload;\n    } catch (error) {\n      console.error('Failed to decode JWT:', error);\n      return null;\n    }\n  }\n}\n"],"mappings":";;AAkBA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,4BAA4B;IACrC,KAAAC,QAAQ,GAAG,OAAO;EAEa;EAEvCC,MAAMA,CAACC,OAAsB;IAC3B,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAiB,GAAG,IAAI,CAACJ,MAAM,SAAS,EAAEG,OAAO,CAAC;EACzE;EAEAE,SAASA,CAACC,KAAa;IACrBC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACP,QAAQ,EAAEK,KAAK,CAAC;EAC5C;EAEAG,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,IAAI,CAACT,QAAQ,CAAC;EAC5C;EAEAU,MAAMA,CAAA;IACJJ,YAAY,CAACK,UAAU,CAAC,IAAI,CAACX,QAAQ,CAAC;EACxC;EAEAY,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACJ,QAAQ,EAAE;EAC1B;EAEA;;;;EAIAK,cAAcA,CAAA;IACZ,MAAMR,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE;IAC7B,IAAI,CAACH,KAAK,EAAE,OAAO,IAAI;IAEvB,IAAI;MACF,MAAMS,aAAa,GAAGT,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACzC,MAAMC,WAAW,GAAGC,IAAI,CAACH,aAAa,CAAC;MACvC,MAAMI,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC;MACvC,OAAOE,OAAO;KACf,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,IAAI;;EAEf;;;uBA3CWzB,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX9B,WAAW;MAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}