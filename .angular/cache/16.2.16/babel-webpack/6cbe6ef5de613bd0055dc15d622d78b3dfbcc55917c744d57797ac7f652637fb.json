{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let EnrollComponent = class EnrollComponent {\n  constructor(http) {\n    this.http = http;\n    this.participants = [];\n    this.events = [];\n    this.participantId = null;\n    this.eventId = null;\n    this.message = '';\n    this.loading = false;\n    this.participantApi = 'http://localhost:5070/api/Participants';\n    this.eventApi = 'http://localhost:5070/api/Events';\n    this.enrollApi = 'http://localhost:5070/api/Enrollments';\n  }\n  ngOnInit() {\n    this.fetchParticipants();\n    this.fetchEvents();\n  }\n  fetchParticipants() {\n    this.http.get(this.participantApi).subscribe({\n      next: data => this.participants = data,\n      error: err => console.error('Error fetching participants', err)\n    });\n  }\n  fetchEvents() {\n    this.http.get(this.eventApi).subscribe({\n      next: data => this.events = data,\n      error: err => console.error('Error fetching events', err)\n    });\n  }\n  enroll() {\n    if (!this.participantId || !this.eventId) {\n      this.message = 'Please select both participant and event.';\n      return;\n    }\n    this.loading = true;\n    this.message = '';\n    const body = {\n      participantId: this.participantId,\n      eventId: this.eventId\n    };\n    this.http.post(this.enrollApi, body).subscribe({\n      next: res => {\n        this.message = res.message || 'Enrollment successful!';\n        this.loading = false;\n      },\n      error: err => {\n        console.error('Error enrolling', err);\n        this.message = err.error || 'Enrollment failed!';\n        this.loading = false;\n      }\n    });\n  }\n};\nEnrollComponent = __decorate([Component({\n  selector: 'app-enroll',\n  templateUrl: '.',\n  styleUrls: ['./enroll.component.css']\n})], EnrollComponent);","map":{"version":3,"names":["Component","EnrollComponent","constructor","http","participants","events","participantId","eventId","message","loading","participantApi","eventApi","enrollApi","ngOnInit","fetchParticipants","fetchEvents","get","subscribe","next","data","error","err","console","enroll","body","post","res","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\participant-eventenroll\\participant-eventenroll.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\ninterface Participant {\n  participantId: number;\n  name: string;\n}\n\ninterface Event {\n  eventId: number;\n  title: string;\n}\n\n@Component({\n  selector: 'app-enroll',\n  templateUrl: '.',\n  styleUrls: ['./enroll.component.css']\n})\nexport class EnrollComponent implements OnInit {\n  participants: Participant[] = [];\n  events: Event[] = [];\n\n  participantId: number | null = null;\n  eventId: number | null = null;\n\n  message = '';\n  loading = false;\n\n  private participantApi = 'http://localhost:5070/api/Participants';\n  private eventApi = 'http://localhost:5070/api/Events';\n  private enrollApi = 'http://localhost:5070/api/Enrollments';\n\n  constructor(private http: HttpClient) {}\n\n  ngOnInit() {\n    this.fetchParticipants();\n    this.fetchEvents();\n  }\n\n  fetchParticipants() {\n    this.http.get<Participant[]>(this.participantApi).subscribe({\n      next: (data) => (this.participants = data),\n      error: (err) => console.error('Error fetching participants', err)\n    });\n  }\n\n  fetchEvents() {\n    this.http.get<Event[]>(this.eventApi).subscribe({\n      next: (data) => (this.events = data),\n      error: (err) => console.error('Error fetching events', err)\n    });\n  }\n\n  enroll() {\n    if (!this.participantId || !this.eventId) {\n      this.message = 'Please select both participant and event.';\n      return;\n    }\n\n    this.loading = true;\n    this.message = '';\n\n    const body = {\n      participantId: this.participantId,\n      eventId: this.eventId\n    };\n\n    this.http.post<any>(this.enrollApi, body).subscribe({\n      next: (res) => {\n        this.message = res.message || 'Enrollment successful!';\n        this.loading = false;\n      },\n      error: (err) => {\n        console.error('Error enrolling', err);\n        this.message = err.error || 'Enrollment failed!';\n        this.loading = false;\n      }\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAkB1C,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAc1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAbxB,KAAAC,YAAY,GAAkB,EAAE;IAChC,KAAAC,MAAM,GAAY,EAAE;IAEpB,KAAAC,aAAa,GAAkB,IAAI;IACnC,KAAAC,OAAO,GAAkB,IAAI;IAE7B,KAAAC,OAAO,GAAG,EAAE;IACZ,KAAAC,OAAO,GAAG,KAAK;IAEP,KAAAC,cAAc,GAAG,wCAAwC;IACzD,KAAAC,QAAQ,GAAG,kCAAkC;IAC7C,KAAAC,SAAS,GAAG,uCAAuC;EAEpB;EAEvCC,QAAQA,CAAA;IACN,IAAI,CAACC,iBAAiB,EAAE;IACxB,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAD,iBAAiBA,CAAA;IACf,IAAI,CAACX,IAAI,CAACa,GAAG,CAAgB,IAAI,CAACN,cAAc,CAAC,CAACO,SAAS,CAAC;MAC1DC,IAAI,EAAGC,IAAI,IAAM,IAAI,CAACf,YAAY,GAAGe,IAAK;MAC1CC,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACF,KAAK,CAAC,6BAA6B,EAAEC,GAAG;KACjE,CAAC;EACJ;EAEAN,WAAWA,CAAA;IACT,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAU,IAAI,CAACL,QAAQ,CAAC,CAACM,SAAS,CAAC;MAC9CC,IAAI,EAAGC,IAAI,IAAM,IAAI,CAACd,MAAM,GAAGc,IAAK;MACpCC,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEC,GAAG;KAC3D,CAAC;EACJ;EAEAE,MAAMA,CAAA;IACJ,IAAI,CAAC,IAAI,CAACjB,aAAa,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;MACxC,IAAI,CAACC,OAAO,GAAG,2CAA2C;MAC1D;;IAGF,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACD,OAAO,GAAG,EAAE;IAEjB,MAAMgB,IAAI,GAAG;MACXlB,aAAa,EAAE,IAAI,CAACA,aAAa;MACjCC,OAAO,EAAE,IAAI,CAACA;KACf;IAED,IAAI,CAACJ,IAAI,CAACsB,IAAI,CAAM,IAAI,CAACb,SAAS,EAAEY,IAAI,CAAC,CAACP,SAAS,CAAC;MAClDC,IAAI,EAAGQ,GAAG,IAAI;QACZ,IAAI,CAAClB,OAAO,GAAGkB,GAAG,CAAClB,OAAO,IAAI,wBAAwB;QACtD,IAAI,CAACC,OAAO,GAAG,KAAK;MACtB,CAAC;MACDW,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAAC,iBAAiB,EAAEC,GAAG,CAAC;QACrC,IAAI,CAACb,OAAO,GAAGa,GAAG,CAACD,KAAK,IAAI,oBAAoB;QAChD,IAAI,CAACX,OAAO,GAAG,KAAK;MACtB;KACD,CAAC;EACJ;CACD;AA7DYR,eAAe,GAAA0B,UAAA,EAL3B3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,GAAG;EAChBC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACW7B,eAAe,CA6D3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}