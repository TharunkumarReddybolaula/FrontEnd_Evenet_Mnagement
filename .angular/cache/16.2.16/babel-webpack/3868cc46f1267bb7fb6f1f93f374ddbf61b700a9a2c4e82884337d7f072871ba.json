{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ModifyEventComponent = class ModifyEventComponent {\n  constructor(eventService, router) {\n    this.eventService = eventService;\n    this.router = router;\n    this.events = [];\n    this.selectedEventId = null;\n    this.event = {\n      eventId: 0,\n      courseTitle: '',\n      topicId: 0,\n      locationId: 0,\n      speakerId: 0,\n      classSize: 0,\n      numberOfDays: 0,\n      startDate: '',\n      endDate: ''\n    };\n    this.topics = [];\n    this.locations = [];\n    this.speakers = [];\n  }\n  ngOnInit() {\n    this.loadDropdowns();\n    this.loadEvents();\n  }\n  // Load dropdown data (Topics, Locations, Speakers)\n  loadDropdowns() {\n    this.eventService.getTopics().subscribe(data => this.topics = data);\n    this.eventService.getLocations().subscribe(data => this.locations = data);\n    this.eventService.getSpeakers().subscribe(data => this.speakers = data);\n  }\n  // Load the events to show in the select dropdown\n  loadEvents() {\n    this.eventService.getEvents().subscribe(data => this.events = data);\n  }\n  // Select an event to modify\n  onSelectEvent() {\n    if (this.selectedEventId !== null) {\n      // Make sure the selected eventId exists before making the API call\n      this.eventService.getEventById(this.selectedEventId).subscribe({\n        next: data => {\n          this.event = data; // Populate the form with the selected event\n        },\n\n        error: err => {\n          console.error('Error fetching event:', err);\n          alert('Event not found or error fetching event.');\n        }\n      });\n    }\n  }\n  // Update the selected event\n  updateEvent() {\n    if (this.selectedEventId !== null) {\n      this.eventService.updateEvent(this.selectedEventId, this.event).subscribe(() => {\n        alert('Event updated successfully!');\n        this.router.navigate(['/view-event']);\n      }, err => {\n        console.error('Error updating event:', err);\n        alert('Failed to update event.');\n      });\n    }\n  }\n};\nModifyEventComponent = __decorate([Component({\n  selector: 'app-modify-event',\n  templateUrl: './modify-event.component.html',\n  styleUrls: ['./modify-event.component.css']\n})], ModifyEventComponent);","map":{"version":3,"names":["Component","ModifyEventComponent","constructor","eventService","router","events","selectedEventId","event","eventId","courseTitle","topicId","locationId","speakerId","classSize","numberOfDays","startDate","endDate","topics","locations","speakers","ngOnInit","loadDropdowns","loadEvents","getTopics","subscribe","data","getLocations","getSpeakers","getEvents","onSelectEvent","getEventById","next","error","err","console","alert","updateEvent","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\modify-event\\modify-event.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { EventService, Event } from '../services/event.service';\r\n\r\n@Component({\r\n  selector: 'app-modify-event',\r\n  templateUrl: './modify-event.component.html',\r\n  styleUrls: ['./modify-event.component.css']\r\n})\r\nexport class ModifyEventComponent implements OnInit {\r\n\r\n  events: Event[] = [];\r\n  selectedEventId: number | null = null;\r\n\r\n  event: Event = {\r\n    eventId: 0,\r\n    courseTitle: '',\r\n    topicId: 0,\r\n    locationId: 0,\r\n    speakerId: 0,\r\n    classSize: 0,\r\n    numberOfDays: 0,\r\n    startDate: '',\r\n    endDate: ''\r\n  };\r\n\r\n  topics: any[] = [];\r\n  locations: any[] = [];\r\n  speakers: any[] = [];\r\n\r\n  constructor(private eventService: EventService, private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadDropdowns();\r\n    this.loadEvents();\r\n  }\r\n\r\n  // Load dropdown data (Topics, Locations, Speakers)\r\n  loadDropdowns() {\r\n    this.eventService.getTopics().subscribe((data) => (this.topics = data));\r\n    this.eventService.getLocations().subscribe((data) => (this.locations = data));\r\n    this.eventService.getSpeakers().subscribe((data) => (this.speakers = data));\r\n  }\r\n\r\n  // Load the events to show in the select dropdown\r\n  loadEvents() {\r\n    this.eventService.getEvents().subscribe((data) => (this.events = data));\r\n  }\r\n\r\n  // Select an event to modify\r\n  onSelectEvent() {\r\n    if (this.selectedEventId !== null) {\r\n      // Make sure the selected eventId exists before making the API call\r\n      this.eventService.getEventById(this.selectedEventId).subscribe({\r\n        next: (data) => {\r\n          this.event = data; // Populate the form with the selected event\r\n        },\r\n        error: (err) => {\r\n          console.error('Error fetching event:', err);\r\n          alert('Event not found or error fetching event.');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Update the selected event\r\n  updateEvent() {\r\n    if (this.selectedEventId !== null) {\r\n      this.eventService.updateEvent(this.selectedEventId, this.event).subscribe(\r\n        () => {\r\n          alert('Event updated successfully!');\r\n          this.router.navigate(['/view-event']);\r\n        },\r\n        (err) => {\r\n          console.error('Error updating event:', err);\r\n          alert('Failed to update event.');\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAS1C,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAqB/BC,YAAoBC,YAA0B,EAAUC,MAAc;IAAlD,KAAAD,YAAY,GAAZA,YAAY;IAAwB,KAAAC,MAAM,GAANA,MAAM;IAnB9D,KAAAC,MAAM,GAAY,EAAE;IACpB,KAAAC,eAAe,GAAkB,IAAI;IAErC,KAAAC,KAAK,GAAU;MACbC,OAAO,EAAE,CAAC;MACVC,WAAW,EAAE,EAAE;MACfC,OAAO,EAAE,CAAC;MACVC,UAAU,EAAE,CAAC;MACbC,SAAS,EAAE,CAAC;MACZC,SAAS,EAAE,CAAC;MACZC,YAAY,EAAE,CAAC;MACfC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE;KACV;IAED,KAAAC,MAAM,GAAU,EAAE;IAClB,KAAAC,SAAS,GAAU,EAAE;IACrB,KAAAC,QAAQ,GAAU,EAAE;EAEqD;EAEzEC,QAAQA,CAAA;IACN,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACC,UAAU,EAAE;EACnB;EAEA;EACAD,aAAaA,CAAA;IACX,IAAI,CAAClB,YAAY,CAACoB,SAAS,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAM,IAAI,CAACR,MAAM,GAAGQ,IAAK,CAAC;IACvE,IAAI,CAACtB,YAAY,CAACuB,YAAY,EAAE,CAACF,SAAS,CAAEC,IAAI,IAAM,IAAI,CAACP,SAAS,GAAGO,IAAK,CAAC;IAC7E,IAAI,CAACtB,YAAY,CAACwB,WAAW,EAAE,CAACH,SAAS,CAAEC,IAAI,IAAM,IAAI,CAACN,QAAQ,GAAGM,IAAK,CAAC;EAC7E;EAEA;EACAH,UAAUA,CAAA;IACR,IAAI,CAACnB,YAAY,CAACyB,SAAS,EAAE,CAACJ,SAAS,CAAEC,IAAI,IAAM,IAAI,CAACpB,MAAM,GAAGoB,IAAK,CAAC;EACzE;EAEA;EACAI,aAAaA,CAAA;IACX,IAAI,IAAI,CAACvB,eAAe,KAAK,IAAI,EAAE;MACjC;MACA,IAAI,CAACH,YAAY,CAAC2B,YAAY,CAAC,IAAI,CAACxB,eAAe,CAAC,CAACkB,SAAS,CAAC;QAC7DO,IAAI,EAAGN,IAAI,IAAI;UACb,IAAI,CAAClB,KAAK,GAAGkB,IAAI,CAAC,CAAC;QACrB,CAAC;;QACDO,KAAK,EAAGC,GAAG,IAAI;UACbC,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEC,GAAG,CAAC;UAC3CE,KAAK,CAAC,0CAA0C,CAAC;QACnD;OACD,CAAC;;EAEN;EAEA;EACAC,WAAWA,CAAA;IACT,IAAI,IAAI,CAAC9B,eAAe,KAAK,IAAI,EAAE;MACjC,IAAI,CAACH,YAAY,CAACiC,WAAW,CAAC,IAAI,CAAC9B,eAAe,EAAE,IAAI,CAACC,KAAK,CAAC,CAACiB,SAAS,CACvE,MAAK;QACHW,KAAK,CAAC,6BAA6B,CAAC;QACpC,IAAI,CAAC/B,MAAM,CAACiC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;MACvC,CAAC,EACAJ,GAAG,IAAI;QACNC,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAEC,GAAG,CAAC;QAC3CE,KAAK,CAAC,yBAAyB,CAAC;MAClC,CAAC,CACF;;EAEL;CACD;AAvEYlC,oBAAoB,GAAAqC,UAAA,EALhCtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACWxC,oBAAoB,CAuEhC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}