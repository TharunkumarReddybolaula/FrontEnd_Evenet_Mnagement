{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EventService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5070/api/Admin'; // Base URL\n  }\n  // Get event by ID\n  getEventById(id) {\n    return this.http.get(`${this.apiUrl}/Event/${id}`).pipe(catchError(this.handleError) // Handle errors globally\n    );\n  }\n  // Update event\n  updateEvent(id, event) {\n    return this.http.put(`${this.apiUrl}/Event/Modify?id=${id}`, event).pipe(catchError(this.handleError) // Handle errors globally\n    );\n  }\n  // Delete event\n  deleteEvent(id) {\n    return this.http.delete(`${this.apiUrl}/Event/Delete?id=${id}`).pipe(catchError(this.handleError) // Handle errors globally\n    );\n  }\n  // Add new event\n  addEvent(event) {\n    return this.http.post(`${this.apiUrl}/Event/Add`, event).pipe(catchError(this.handleError) // Handle errors globally\n    );\n  }\n  // Get all events\n  getEvents() {\n    return this.http.get(`${this.apiUrl}/Event/View`).pipe(catchError(this.handleError) // Handle errors globally\n    );\n  }\n  // Get topics for dropdown\n  getTopics() {\n    return this.http.get(`${this.apiUrl}/Topic/view`).pipe(catchError(this.handleError) // Handle errors globally\n    );\n  }\n  // Get locations for dropdown\n  getLocations() {\n    return this.http.get(`${this.apiUrl}/Location/View`).pipe(catchError(this.handleError) // Handle errors globally\n    );\n  }\n  // Get speakers for dropdown\n  getSpeakers() {\n    return this.http.get(`${this.apiUrl}/Speakers/View`).pipe(catchError(this.handleError) // Handle errors globally\n    );\n  }\n  // Generic error handling function\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side or network error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Backend error\n      errorMessage = `Server returned code ${error.status}, message: ${error.message}`;\n    }\n    console.error(errorMessage); // Log error to the console\n    return throwError(() => new Error(errorMessage)); // Rethrow the error to be handled by the component\n  }\n\n  static {\n    this.ɵfac = function EventService_Factory(t) {\n      return new (t || EventService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EventService,\n      factory: EventService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","EventService","constructor","http","apiUrl","getEventById","id","get","pipe","handleError","updateEvent","event","put","deleteEvent","delete","addEvent","post","getEvents","getTopics","getLocations","getSpeakers","error","errorMessage","ErrorEvent","message","status","console","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\services copy\\event.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nexport interface Event {\r\n  eventId?: number;\r\n  courseTitle: string;\r\n  topicId: number;\r\n  locationId: number;\r\n  speakerId: number;\r\n  classSize: number;\r\n  numberOfDays: number;\r\n  startDate: string;\r\n  endDate: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventService {\r\n  private apiUrl = 'http://localhost:5070/api/Admin';  // Base URL\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get event by ID\r\n  getEventById(id: number): Observable<Event> {\r\n    return this.http.get<Event>(`${this.apiUrl}/Event/${id}`).pipe(\r\n      catchError(this.handleError) // Handle errors globally\r\n    );\r\n  }\r\n\r\n  // Update event\r\n  updateEvent(id: number, event: Event): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}/Event/Modify?id=${id}`, event).pipe(\r\n      catchError(this.handleError) // Handle errors globally\r\n    );\r\n  }\r\n\r\n  // Delete event\r\n  deleteEvent(id: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/Event/Delete?id=${id}`).pipe(\r\n      catchError(this.handleError) // Handle errors globally\r\n    );\r\n  }\r\n\r\n  // Add new event\r\n  addEvent(event: Event): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/Event/Add`, event).pipe(\r\n      catchError(this.handleError) // Handle errors globally\r\n    );\r\n  }\r\n\r\n  // Get all events\r\n  getEvents(): Observable<Event[]> {\r\n    return this.http.get<Event[]>(`${this.apiUrl}/Event/View`).pipe(\r\n      catchError(this.handleError) // Handle errors globally\r\n    );\r\n  }\r\n\r\n  // Get topics for dropdown\r\n  getTopics(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/Topic/view`).pipe(\r\n      catchError(this.handleError) // Handle errors globally\r\n    );\r\n  }\r\n\r\n  // Get locations for dropdown\r\n  getLocations(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/Location/View`).pipe(\r\n      catchError(this.handleError) // Handle errors globally\r\n    );\r\n  }\r\n\r\n  // Get speakers for dropdown\r\n  getSpeakers(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/Speakers/View`).pipe(\r\n      catchError(this.handleError) // Handle errors globally\r\n    );\r\n  }\r\n\r\n  // Generic error handling function\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error occurred!';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side or network error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Backend error\r\n      errorMessage = `Server returned code ${error.status}, message: ${error.message}`;\r\n    }\r\n    console.error(errorMessage);  // Log error to the console\r\n    return throwError(() => new Error(errorMessage));  // Rethrow the error to be handled by the component\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}