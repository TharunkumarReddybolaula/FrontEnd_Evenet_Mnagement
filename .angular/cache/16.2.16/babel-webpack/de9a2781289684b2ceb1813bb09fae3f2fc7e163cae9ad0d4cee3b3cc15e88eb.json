{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators'; // Import catchError for error handling\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:5070/api/Administrator'; // Base URL for the Admin API\n  }\n  // Add an administrator with username and password as query parameters\n  addAdmin(admin, username, password) {\n    const params = new HttpParams().set('username', username).set('password', password);\n    return this.http.post(`${this.baseUrl}/Admin/Add`, admin,\n    // Admin data in the body\n    {\n      params\n    } // Query parameters\n    ).pipe(catchError(this.handleError) // Error handling\n    );\n  }\n  // Get all administrators\n  getAllAdmins() {\n    return this.http.get(`${this.baseUrl}/Admin/View`).pipe(catchError(this.handleError) // Error handling\n    );\n  }\n  // Add a promotional code\n  addPromoCode(promoCode) {\n    return this.http.post(`${this.baseUrl}/PromoCode/add`, promoCode).pipe(catchError(this.handleError) // Error handling\n    );\n  }\n  // Get all promotional codes\n  getAllPromoCodes() {\n    return this.http.get(`${this.baseUrl}/PromoCode/view`).pipe(catchError(this.handleError) // Error handling\n    );\n  }\n  // Delete a promotional code by its ID\n  deletePromoCode(id) {\n    return this.http.delete(`${this.baseUrl}/PromoCode/delete/${id}`).pipe(catchError(this.handleError) // Error handling\n    );\n  }\n  // Add a location\n  addLocation(location) {\n    return this.http.post(`${this.baseUrl}/Location/Add`, location).pipe(catchError(this.handleError) // Error handling\n    );\n  }\n  // Get all locations\n  getAllLocations() {\n    return this.http.get(`${this.baseUrl}/Location/View`).pipe(catchError(this.handleError) // Error handling\n    );\n  }\n  // Get all events\n  getAllEvents() {\n    return this.http.get(`${this.baseUrl}/Event/View`).pipe(catchError(this.handleError) // Error handling\n    );\n  }\n  // Add an event\n  addEvent(event) {\n    return this.http.post(`${this.baseUrl}/Event/Add`, event).pipe(catchError(this.handleError) // Error handling\n    );\n  }\n  // Add a speaker\n  addSpeaker(speaker) {\n    return this.http.post(`${this.baseUrl}/Speakers/Add`, speaker).pipe(catchError(this.handleError) // Error handling\n    );\n  }\n  // Get all speakers\n  getAllSpeakers() {\n    return this.http.get(`${this.baseUrl}/Speakers/View`).pipe(catchError(this.handleError) // Error handling\n    );\n  }\n  // General error handling method\n  handleError(error) {\n    console.error('An error occurred:', error); // Log the error to the console\n    throw error; // Rethrow the error to be handled by subscribers\n  }\n\n  static {\n    this.ɵfac = function AdminService_Factory(t) {\n      return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminService,\n      factory: AdminService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","catchError","AdminService","constructor","http","baseUrl","addAdmin","admin","username","password","params","set","post","pipe","handleError","getAllAdmins","get","addPromoCode","promoCode","getAllPromoCodes","deletePromoCode","id","delete","addLocation","location","getAllLocations","getAllEvents","addEvent","event","addSpeaker","speaker","getAllSpeakers","error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\services copy\\admin.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';  // Import catchError for error handling\r\n\r\nexport interface Administrator {\r\n  adminId?: number;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  userId?: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n  private baseUrl = 'http://localhost:5070/api/Administrator';  // Base URL for the Admin API\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Add an administrator with username and password as query parameters\r\n  addAdmin(admin: Administrator, username: string, password: string): Observable<any> {\r\n    const params = new HttpParams()\r\n      .set('username', username)\r\n      .set('password', password);\r\n\r\n    return this.http.post<any>(\r\n      `${this.baseUrl}/Admin/Add`,\r\n      admin,       // Admin data in the body\r\n      { params }   // Query parameters\r\n    ).pipe(\r\n      catchError(this.handleError) // Error handling\r\n    );\r\n  }\r\n\r\n  // Get all administrators\r\n  getAllAdmins(): Observable<Administrator[]> {\r\n    return this.http.get<Administrator[]>(`${this.baseUrl}/Admin/View`).pipe(\r\n      catchError(this.handleError) // Error handling\r\n    );\r\n  }\r\n\r\n  // Add a promotional code\r\n  addPromoCode(promoCode: any): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/PromoCode/add`, promoCode).pipe(\r\n      catchError(this.handleError) // Error handling\r\n    );\r\n  }\r\n\r\n  // Get all promotional codes\r\n  getAllPromoCodes(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/PromoCode/view`).pipe(\r\n      catchError(this.handleError) // Error handling\r\n    );\r\n  }\r\n\r\n  // Delete a promotional code by its ID\r\n  deletePromoCode(id: number): Observable<any> {\r\n    return this.http.delete<any>(`${this.baseUrl}/PromoCode/delete/${id}`).pipe(\r\n      catchError(this.handleError) // Error handling\r\n    );\r\n  }\r\n\r\n  // Add a location\r\n  addLocation(location: any): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/Location/Add`, location).pipe(\r\n      catchError(this.handleError) // Error handling\r\n    );\r\n  }\r\n\r\n  // Get all locations\r\n  getAllLocations(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/Location/View`).pipe(\r\n      catchError(this.handleError) // Error handling\r\n    );\r\n  }\r\n\r\n  // Get all events\r\n  getAllEvents(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/Event/View`).pipe(\r\n      catchError(this.handleError) // Error handling\r\n    );\r\n  }\r\n\r\n  // Add an event\r\n  addEvent(event: any): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/Event/Add`, event).pipe(\r\n      catchError(this.handleError) // Error handling\r\n    );\r\n  }\r\n\r\n  // Add a speaker\r\n  addSpeaker(speaker: any): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/Speakers/Add`, speaker).pipe(\r\n      catchError(this.handleError) // Error handling\r\n    );\r\n  }\r\n\r\n  // Get all speakers\r\n  getAllSpeakers(): Observable<any[]> {\r\n    return this.http.get<any[]>(`${this.baseUrl}/Speakers/View`).pipe(\r\n      catchError(this.handleError) // Error handling\r\n    );\r\n  }\r\n\r\n  // General error handling method\r\n  private handleError(error: any): Observable<never> {\r\n    console.error('An error occurred:', error); // Log the error to the console\r\n    throw error; // Rethrow the error to be handled by subscribers\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}