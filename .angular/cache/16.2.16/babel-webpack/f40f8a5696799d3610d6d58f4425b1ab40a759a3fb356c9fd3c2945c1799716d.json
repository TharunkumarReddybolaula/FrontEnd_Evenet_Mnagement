{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ModifyEventComponent = class ModifyEventComponent {\n  constructor(eventService, router) {\n    this.eventService = eventService;\n    this.router = router;\n    this.events = [];\n    this.selectedEventId = null;\n    this.event = {\n      eventId: 0,\n      courseTitle: '',\n      topicId: 0,\n      locationId: 0,\n      speakerId: 0,\n      classSize: 0,\n      numberOfDays: 0,\n      startDate: '',\n      endDate: ''\n    };\n    this.topics = [];\n    this.locations = [];\n    this.speakers = [];\n    this.errorMessage = null;\n  }\n  ngOnInit() {\n    this.loadDropdowns();\n    this.loadEvents();\n  }\n  loadDropdowns() {\n    this.eventService.getTopics().subscribe(data => this.topics = data, err => this.handleError(err));\n    this.eventService.getLocations().subscribe(data => this.locations = data, err => this.handleError(err));\n    this.eventService.getSpeakers().subscribe(data => this.speakers = data, err => this.handleError(err));\n  }\n  loadEvents() {\n    this.eventService.getEvents().subscribe(data => this.events = data, err => this.handleError(err));\n  }\n  onSelectEvent() {\n    if (this.selectedEventId !== null) {\n      this.eventService.getEventById(this.selectedEventId).subscribe(data => {\n        this.event = data;\n        this.errorMessage = null; // Clear any previous errors\n      }, err => {\n        this.handleError(err);\n      });\n    }\n  }\n  updateEvent() {\n    if (this.selectedEventId !== null) {\n      this.eventService.updateEvent(this.selectedEventId, this.event).subscribe(() => {\n        alert('Event updated successfully!');\n        this.router.navigate(['/view-event']);\n      }, err => {\n        this.handleError(err);\n        alert('Failed to update event.');\n      });\n    }\n  }\n  handleError(error) {\n    console.error('Error:', error);\n    if (error.status === 404) {\n      this.errorMessage = 'Event not found. Please check the event ID.';\n    } else {\n      this.errorMessage = 'An error occurred while processing your request. Please try again later.';\n    }\n  }\n};\nModifyEventComponent = __decorate([Component({\n  selector: 'app-modify-event',\n  templateUrl: './modify-event.component.html',\n  styleUrls: ['./modify-event.component.css']\n})], ModifyEventComponent);","map":{"version":3,"names":["Component","ModifyEventComponent","constructor","eventService","router","events","selectedEventId","event","eventId","courseTitle","topicId","locationId","speakerId","classSize","numberOfDays","startDate","endDate","topics","locations","speakers","errorMessage","ngOnInit","loadDropdowns","loadEvents","getTopics","subscribe","data","err","handleError","getLocations","getSpeakers","getEvents","onSelectEvent","getEventById","updateEvent","alert","navigate","error","console","status","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\labuser\\source\\repos\\project\\auth\\src\\app\\modify-event\\modify-event.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { EventService, Event } from '../services/event.service';\r\n\r\n@Component({\r\n  selector: 'app-modify-event',\r\n  templateUrl: './modify-event.component.html',\r\n  styleUrls: ['./modify-event.component.css']\r\n})\r\nexport class ModifyEventComponent implements OnInit {\r\n\r\n  events: Event[] = [];\r\n  selectedEventId: number | null = null;\r\n  event: Event = {\r\n    eventId: 0,\r\n    courseTitle: '',\r\n    topicId: 0,\r\n    locationId: 0,\r\n    speakerId: 0,\r\n    classSize: 0,\r\n    numberOfDays: 0,\r\n    startDate: '',\r\n    endDate: ''\r\n  };\r\n  topics: any[] = [];\r\n  locations: any[] = [];\r\n  speakers: any[] = [];\r\n  errorMessage: string | null = null;\r\n\r\n  constructor(private eventService: EventService, private router: Router) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadDropdowns();\r\n    this.loadEvents();\r\n  }\r\n\r\n  loadDropdowns() {\r\n    this.eventService.getTopics().subscribe(\r\n      (data) => this.topics = data,\r\n      (err) => this.handleError(err)\r\n    );\r\n    this.eventService.getLocations().subscribe(\r\n      (data) => this.locations = data,\r\n      (err) => this.handleError(err)\r\n    );\r\n    this.eventService.getSpeakers().subscribe(\r\n      (data) => this.speakers = data,\r\n      (err) => this.handleError(err)\r\n    );\r\n  }\r\n\r\n  loadEvents() {\r\n    this.eventService.getEvents().subscribe(\r\n      (data) => this.events = data,\r\n      (err) => this.handleError(err)\r\n    );\r\n  }\r\n\r\n  onSelectEvent() {\r\n    if (this.selectedEventId !== null) {\r\n      this.eventService.getEventById(this.selectedEventId).subscribe(\r\n        (data) => {\r\n          this.event = data;\r\n          this.errorMessage = null; // Clear any previous errors\r\n        },\r\n        (err) => {\r\n          this.handleError(err);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  updateEvent() {\r\n    if (this.selectedEventId !== null) {\r\n      this.eventService.updateEvent(this.selectedEventId, this.event).subscribe(\r\n        () => {\r\n          alert('Event updated successfully!');\r\n          this.router.navigate(['/view-event']);\r\n        },\r\n        (err) => {\r\n          this.handleError(err);\r\n          alert('Failed to update event.');\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleError(error: any) {\r\n    console.error('Error:', error);\r\n    if (error.status === 404) {\r\n      this.errorMessage = 'Event not found. Please check the event ID.';\r\n    } else {\r\n      this.errorMessage = 'An error occurred while processing your request. Please try again later.';\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}